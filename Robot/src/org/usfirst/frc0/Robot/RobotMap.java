// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeft1;
    public static SpeedController driveTrainLeft2;
    public static Encoder driveTrainLeftEncoder;
    public static SpeedController driveTrainRight1;
    public static SpeedController driveTrainRight2;
    public static Encoder driveTrainRightEncoder;
    public static DoubleSolenoid driveTrainGearSwitchPiston;
    public static Encoder shooterShooterEncoder;
    public static SpeedController shooterShooterMotor;
    public static Solenoid shooterBallReleasePiston;
    public static SpeedController feederIntakeMotor;
    public static DoubleSolenoid feederIntakeMovementPiston;
    public static SpeedController blockerBlockerMovementMotor;
    public static Encoder blockerBlockerMotorEncoder;
    public static DoubleSolenoid blockerBlockerLockingPiston;
    public static Compressor mainetenanceCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeft1 = new Talon(1, 1);
	LiveWindow.addActuator("DriveTrain", "Left1", (Talon) driveTrainLeft1);
        
        driveTrainLeft2 = new Talon(1, 2);
	LiveWindow.addActuator("DriveTrain", "Left2", (Talon) driveTrainLeft2);
        
        driveTrainLeftEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainLeftEncoder.start();
        driveTrainRight1 = new Talon(1, 3);
	LiveWindow.addActuator("DriveTrain", "Right1", (Talon) driveTrainRight1);
        
        driveTrainRight2 = new Talon(1, 4);
	LiveWindow.addActuator("DriveTrain", "Right2", (Talon) driveTrainRight2);
        
        driveTrainRightEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainRightEncoder.start();
        driveTrainGearSwitchPiston = new DoubleSolenoid(1, 1, 2);      
	
        
        shooterShooterEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "ShooterEncoder", shooterShooterEncoder);
        shooterShooterEncoder.setDistancePerPulse(1);
        shooterShooterEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterShooterEncoder.start();
        shooterShooterMotor = new Talon(1, 5);
	LiveWindow.addActuator("Shooter", "ShooterMotor", (Talon) shooterShooterMotor);
        
        shooterBallReleasePiston = new Solenoid(1, 3);
	
        
        feederIntakeMotor = new Talon(1, 6);
	LiveWindow.addActuator("Feeder", "IntakeMotor", (Talon) feederIntakeMotor);
        
        feederIntakeMovementPiston = new DoubleSolenoid(1, 4, 5);      
	
        
        blockerBlockerMovementMotor = new Talon(1, 7);
	LiveWindow.addActuator("Blocker", "BlockerMovementMotor", (Talon) blockerBlockerMovementMotor);
        
        blockerBlockerMotorEncoder = new Encoder(1, 7, 1, 8, false, EncodingType.k4X);
	LiveWindow.addSensor("Blocker", "BlockerMotorEncoder", blockerBlockerMotorEncoder);
        blockerBlockerMotorEncoder.setDistancePerPulse(1.0);
        blockerBlockerMotorEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        blockerBlockerMotorEncoder.start();
        
        blockerBlockerLockingPiston = new DoubleSolenoid(1, 6, 7);
        
        mainetenanceCompressor = new Compressor(1, 9, 1, 1);
	
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
