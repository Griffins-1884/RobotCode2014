// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1884.Robot.subsystems;

import org.usfirst.frc1884.Robot.RobotMap;
import org.usfirst.frc1884.Robot.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Feeder extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController intakeMotor = RobotMap.feederIntakeMotor;
    DoubleSolenoid intakeMovementPiston = RobotMap.feederIntakeMovementPiston;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    private PistonClass pistonClass;
    private double speed;
    private boolean isExtended;
    private static long PISTON_MOVE_TIME = 1500;

    /**
     * This returns true if the arm is extended, false if otherwise.
     *
     * @return True if the arm is extended. False if the arm is retracted.
     */
    public boolean isArmExtended() {
        return isExtended;
    }

    /**
     * This extends the Feeder arm.
     */
    public void extendFeeder() {
        pistonClass.extendFeeder();
    }

    /**
     * This retracts the Feeder arm.
     */
    public void retractFeeder() {
        pistonClass.retractFeeder();
    }

    /**
     * This rolls the Feeder in.
     */
    public void rollIn() {
        intakeMotor.set(speed);
    }

    /**
     * This rolls the Feeder in reverse.
     */
    public void rollOut() {
        intakeMotor.set(-speed);
    }

    /**
     * This stops the Feeder roll.
     */
    public void noRoll() {
        intakeMotor.set(0);
    }

    private class PistonClass implements Runnable {

        private boolean isRunning;
        private Thread thisThread;
        private byte RUN_TYPE_IN = 0;
        private byte RUN_TYPE_OUT = 1;
        private byte runType;

        private PistonClass() {
            isRunning = false;
            thisThread = new Thread(this);
        }

        void extendFeeder() {
            runType = RUN_TYPE_IN;
            runThread();
        }

        void retractFeeder() {
            runType = RUN_TYPE_OUT;
            runThread();
        }

        private void runThread() {
            if (!isRunning) {
                thisThread.start();
            }
        }

        public void run() {
            isRunning = true;
            if (runType == RUN_TYPE_OUT) {
                intakeMovementPiston.set(DoubleSolenoid.Value.kForward);
                try {
                    Thread.sleep(PISTON_MOVE_TIME);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                isExtended = true;
            } else if (runType == RUN_TYPE_IN) {
                intakeMovementPiston.set(DoubleSolenoid.Value.kReverse);
                try {
                    Thread.sleep(PISTON_MOVE_TIME);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                isExtended = false;
            }
            isRunning = false;
        }

    }

    /**
     * Set the intake speed of the motor. This should be between 0 and 1.
     *
     * @param speed The intake speed to set the motor to.
     */
    public void setIntakeSpeed(double speed) {
        this.speed = speed;
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        this.speed = 1;
        this.isExtended = false;
        pistonClass = new PistonClass();
    }
}
