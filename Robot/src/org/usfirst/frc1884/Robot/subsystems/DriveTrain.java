// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1884.Robot.subsystems;

import org.usfirst.frc1884.Robot.RobotMap;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController left1 = RobotMap.driveTrainLeft1;
    SpeedController left2 = RobotMap.driveTrainLeft2;
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    SpeedController right1 = RobotMap.driveTrainRight1;
    SpeedController right2 = RobotMap.driveTrainRight2;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    DoubleSolenoid gearSwitchPiston = RobotMap.driveTrainGearSwitchPiston;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public static final long THREAD_POLL_INTERVAL = 250;
    private boolean isHighGear;

    /**
     * This sets the speed of the Talons on the left side of the motor.
     *
     * @param value The value to set the motors to.
     */
    public void setLeftValues(double value) {
        left1.set(value);
        left2.set(value);
    }

    /**
     * This sets the speed of the Talons on the right side of the motor.
     *
     * @param value The value to set the motors to.
     */
    public void setRightValues(double value) {
        right1.set(value);
        right2.set(value);
    }

    /**
     * This sets the gearbox to the low gear.
     */
    public void setToHighGear() {
        gearSwitchPiston.set(DoubleSolenoid.Value.kForward);
        isHighGear = true;
    }

    /**
     * This sets the gearbox to the high gear.
     */
    public void setToLowGear() {
        gearSwitchPiston.set(DoubleSolenoid.Value.kReverse);
        isHighGear = false;
    }

    public class SmartDrive implements Runnable {

        private double distance;
        private double leftSpeed;
        private double rightSpeed;
        private long threadPollInterval;
        private boolean isRunning;
        private Thread checkup;

        /**
         * This is the constructor for the SmartDrive class. This class allows
         * the drivetrain to move a specified amount.
         *
         * @param distance The distance in inches to move.
         * @param rightSpeed The speed to give the Talons controlling the right
         * side of the robot. This should be between -1.0 and 1.0.
         * @param leftSpeed The speed to give the Talons controlling the left
         * side of the robot. Should be between -1.0 and 1.0.
         * @param threadPollInterval The time between checking the distance
         * traveled.
         */
        public SmartDrive(double distance, double rightSpeed, double leftSpeed, long threadPollInterval) {
            this.distance = distance;
            this.leftSpeed = leftSpeed;
            this.rightSpeed = rightSpeed;
            this.threadPollInterval = threadPollInterval;
            this.isRunning = false;
            checkup = new Thread(this);
        }

        /**
         * This is the constructor for the SmartDrive class. This class allows
         * the drivetrain to move a specified amount.
         *
         * @param distance The distance in inches to move.
         * @param rightSpeed The speed to give the Talons controlling the right
         * side of the robot. This should be between -1.0 and 1.0.
         * @param leftSpeed The speed to give the Talons controlling the left
         * side of the robot. Should be between -1.0 and 1.0.
         */
        public SmartDrive(double distance, double rightSpeed, double leftSpeed) {
            this(distance, rightSpeed, leftSpeed, THREAD_POLL_INTERVAL);
        }

        /**
         * This is the constructor for the SmartDrive class. This class allows
         * the drivetrain to move a specified amount.
         *
         * @param distance The distance in inches to move.
         * @param speed The speed to give the Talons controlling the right side
         * of the robot. This should be between -1.0 and 1.0.
         * @param threadPollInterval The time between checking the distance
         * traveled.
         */
        public SmartDrive(double distance, double speed, long threadPollInterval) {
            this(distance, speed, speed, THREAD_POLL_INTERVAL);
        }

        /**
         * This is the constructor for the SmartDrive class. This class allows
         * the drivetrain to move a specified amount.
         *
         * @param distance The distance in inches to move.
         * @param speed The speed to give the Talons controlling the robot.
         * Should be between -1.0 and 1.0.
         */
        public SmartDrive(double distance, double speed) {
            this(distance, speed, speed, THREAD_POLL_INTERVAL);
        }

        public void startTrack() {
            leftEncoder.reset();
            rightEncoder.reset();
        }

        public double getDistanceDriven() {
            return ((leftEncoder.getDistance() + rightEncoder.getDistance()) / 2.0);

        }

        public void startDrive() {
            setLeftValues(leftSpeed);
            setRightValues(rightSpeed);
        }

        public void endDrive() {
            setLeftValues(0);
            setRightValues(0);
        }

        public void driveDistance() {
            checkup.start();
        }

        public void run() {
            isRunning = true;
            startTrack();
            startDrive();
            boolean hasDrivenDistance = false;
            while (!hasDrivenDistance) {
                if (getDistanceDriven() >= distance) {
                    hasDrivenDistance = true;
                } else {
                    try {
                        Thread.sleep(threadPollInterval);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
            endDrive();
            isRunning = false;
        }
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        leftEncoder.setDistancePerPulse(0.5);
        rightEncoder.setDistancePerPulse(0.5);
        isHighGear = true;
    }
}